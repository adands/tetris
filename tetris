import pygame as pg
import random as rd
import os


#基礎設定
clock = pg.time.Clock()
game_over = False
FPS = 30
SCREEN_SIZE=(610,620)
WHITE = (255,255,255)
BLACK = (0,0,0)
GRAY = (150,150,150)
BLOCKCOLOR = [
(0,   255, 255),#AQUA
(255, 255, 0  ),#YELLOW
(128, 0,   128),#PURPLE
(255, 100, 0  ),#ORANGE
(0,   0,   255),#BLUE
(0,   128, 0  ),#GREEN
(255, 0,   0  )#RED
]
TETROMINO = {
    "1":[(0 ,0 ),(-1,0),(-2,0),(1,0)], # 一字
    "2":[(-1,-1),(0,-1),(-1,0),(0,0)], # 田字
    "3":[(0,0),(0,-1),(1,0),(-1,0)],   # T型
    "4":[(0,0),(0,-1),(0,1),(1,1)],    # L型
    "5":[(0,0),(0,-1),(0,1),(-1,1)],   # J型
    "6":[(0,0),(1,-1),(-1,0),(0,-1)],  # S型
    "7":[(0,0),(0,-1),(-1,-1),(1,0)]   # Z型
}
grid_size= 30
vec = pg.math.Vector2
blockstart = vec(5,1)



game_position =(155,10)

fallin = False
goright = False
goleft = False
turn = False

class block(pg.sprite.Sprite):
    def __init__(self,tetromino,pos):
        self.tetromino = tetromino
        self.pos = vec(pos) + blockstart
        self.color = int(self.tetromino.shape) - 1
        self.next_pos = vec(pos) + vec(13,1)
        self.switch_pos = vec(pos) + vec(-3,1)


        super().__init__(self.tetromino.tetris.move_block)
        self.image = pg.Surface([grid_size,grid_size])
        self.rect = self.image.get_rect()
        pg.draw.rect(self.image,BLOCKCOLOR[self.color],[1,1,grid_size,grid_size],border_radius=1)

    def position_set(self):
        x,y = game_position
        pos = [self.pos,self.next_pos,self.switch_pos][self.tetromino.current]
        self.rect.topleft = (x + pos[0]*grid_size,y + pos[1]*grid_size)

    def new_block(self):
        if self.tetromino.land == True:
            self.remove(self.tetromino.tetris.move_block)

    def iscollide(self,pos):
        x,y = int(pos[0]),int(pos[1])
        if 0>x or x>=10 or y>=20 or self.tetromino.tetris.back.grids[y][x] :
            return True
        return False

    def rotate(self,pos):
        Relative = self.pos - pos
        new = Relative.rotate(90)
        return new + pos


    def update(self):
        self.position_set()
        self.new_block()


class tetromino:
    def __init__(self,tetris,current = 0):
        self.tetris = tetris
        self.shape = rd.choice(list(TETROMINO.keys()))
        self.blocks = [block(self,pos)for pos in TETROMINO[self.shape]]
        self.land = False
        self.current = current


    def rotate(self):
        pivot_pos = self.blocks[0].pos
        new_pos =[block.rotate(pivot_pos) for block in self.blocks]
        collide = self.collide(new_pos)

        if not collide:
            for i,block in enumerate(self.blocks):
                block.pos = new_pos[i]

    def collide(self,position):
        return any(map(block.iscollide,self.blocks,position))


    def move(self,x,y):
        direction = vec(x,y)
        new_pos =[block.pos + direction for block in self.blocks]
        collidition = self.collide(new_pos)

        if not collidition:
            for block in self.blocks:
                block.pos += direction
        elif (x,y) == (0,1) :
            self.land = True

    def pgcollide(self):
        return pg.sprite.groupcollide(self.tetris.move_block,self.tetris.stop_block,False,False)

    def border_rotate(self):
        pivot_pos = self.blocks[0].pos                                                  # 抓取第一個方塊的位置作為基準
        new_block_positions = [block.rotate(pivot_pos)for block in self.blocks]         # 呼叫方塊旋轉函式並帶入舊的位置記算出新的位置，並記錄
        if self.collide(new_block_positions):
            for block in self.blocks:
                if self.shape != '1':
                    if block.pos.x <= 1:
                        if self.collide(new_block_positions):
                            block.pos.x +=1
                            if self.pgcollide:
                                block.pos.x -=1
                                self.rotate()
                        else:
                            self.rotate()
                    if block.pos.x >=8:
                        if self.collide(new_block_positions):

                            block.pos.x -=1
                        else:
                            self.rotate()
                else:
                    if block.pos.x <= 1:
                        if self.collide(new_block_positions):
                            block.pos.x += 1
                        else:
                            self.rotate
                    if block.pos.x >= 8:
                        if self.collide(new_block_positions):
                            block.pos.x -=1
                        else:
                            self.rotate


    def GoSpace(self):
        newP = [block.pos + vec(0,1) for block in self.blocks]
        collide = self.collide(newP)

        while not collide:
            for block in self.blocks:
                block.pos += vec(0,1)
                newP = [block.pos + vec(0,1) for block in self.blocks]
                collide = self.collide(newP)
            self.land = True

    def update(self):
        if self.tetris.app.counter ==0:
            self.move(0,1)
        if fallin == True:
            self.move(0,1)
            pg.time.delay(40)




class background:
    def __init__(self,tetris):
        self.tetris = tetris
        self.grids = self.array()

    def array(self):
        return [[0 for x in range(10)] for y in range(20) ]

    def memory(self):
        if self.tetris.tetromino.land == True:
            self.tetris.stop_block.add(block for block in self.tetris.tetromino.blocks)
        for block in self.tetris.tetromino.blocks:
            x,y = int(block.pos.x), int(block.pos.y)                                # 取得每個方塊相對應的X,Y位置(此為方塊位置，非畫面位置)
            self.grids[y][x] = block                                               # 將方塊記錄在相對應的位置

    def check_line(self):
        row = 19
        for r in range(row,-1,-1):
            for c in range(10):
                self.grids[row][c] = self.grids[r][c]

                if self.grids[r][c]:
                    self.grids[row][c].pos = vec(c,r)

            if sum(map(bool,self.grids[r])) < 10:
                row -=1
            else:
                for c in range(10):
                    self.grids[row][c].kill()
                    self.grids[row][c] = 0
                    self.tetris.full_lines += 1

    def update(self):
        self.check_line()

class tetris:
    def __init__(self,app):
        self.app =app
        self.move_block = pg.sprite.Group()
        self.stop_block = pg.sprite.Group()
        self.back = background(self)
        self.tetromino = tetromino(self)
        self.game_level = 20
        self.score = 0
        self.count = 0
        self.GameState = "running"
        self.scoredic = {0:0,10:100,20:300,30:500,40:700}
        self.change_block = None
        self.new_block = tetromino(self,current = 1)
        self.full_lines = 0
        self.restart = False

    def change(self):
        if self.change_block == None:
            self.change_block,self.tetromino = self.tetromino,self.new_block
            self.change_block.current = 2
            self.tetromino.current = 0
            self.new_block = tetromino(self,current=1)
        else:
            self.change_block,self.tetromino = self.tetromino , self.change_block
            self.change_block.current = 2
            self.tetromino.current =0
            for shape in self.tetromino.shape:
                shape_pos = TETROMINO[shape]
                for i,block in enumerate(self.tetromino.blocks):
                    block.pos = vec(shape_pos[i]) + blockstart

    def GetScore(self):
        self.score += self.scoredic[self.full_lines]
        self.full_lines = 0

    def draw(self):
        self.stop_block.draw(self.app.screen)
        self.move_block.draw(self.app.screen)
        for row in range(20):
            for col in range(10):
                pg.draw.rect(self.app.screen,BLACK,[game_position[0]+grid_size*col , game_position[1]+grid_size*row,grid_size,grid_size],1)

        for row in range(4):
            for col in range(4):
                pg.draw.rect(self.app.screen,BLACK,[5+grid_size*col , 10+grid_size*row,grid_size,grid_size],1)

        for row in range(4):
            for col in range(4):
                pg.draw.rect(self.app.screen,BLACK,[485+grid_size*col , 10+grid_size*row,grid_size,grid_size],1)


    def game_level_set(self):
        if self.score > 1600:
            self.game_level = 18
        if self.score > 2700:
            self.game_level = 16
        if self.score > 4000:
            self.game_level = 14
        if self.score > 5500:
            self.game_level = 12
        if self.score > 7300:
            self.game_level = 8
        if self.score > 9300:
            self.game_level = 6
        if self.score > 12000:
            self.game_level = 3

    def control(self):
        if self.count % 3 == 0:
            if goleft == True:
                self.tetromino.move(-1,0)
            if goright == True:
                self.tetromino.move(1,0)
            if turn == True:
                if self.tetromino.shape != "2":
                    self.tetromino.border_rotate()
                    self.tetromino.rotate()

    def freez(self):
        if self.tetromino.land == True:
            if self.game_over():
                self.GameState = "game_over"
                if self.restart == True:
                    self.__init__(self.app)
            else:
                self.back.memory()
                pg.time.delay(200)
                self.tetromino,self.new_block = self.new_block,tetromino(self,current=1)
                self.tetromino.current = 0

    def game_over(self):
        if self.tetromino.blocks[0].pos.y == 1:
            pg.time.wait(300)
            return True

    def update(self):
        self.count +=1
        if self.count>=100:
            self.count=1
        self.control()
        self.move_block.update()
        self.stop_block.update()
        self.tetromino.update()
        self.back.update()
        self.game_level_set()
        self.freez()
        self.GetScore()

class App:
    def __init__(self,):
        pg.init()
        self.BACKGROUND = pg.image.load(os.path.join("Mitrex","background.png"))
        self.game = tetris(self)
        self.counter = 0
        self.screen = pg.display.set_mode(SCREEN_SIZE)
        pg.display.set_caption("TETRIS")

    def draw(self):
        self.screen.blit(self.BACKGROUND,[0,0])
        font_score = pg.font.SysFont('Courier', 20, True, True)                     # sysfont("字型", 大小 , 粗體, 斜體)   #繪製得分
        text_score = font_score.render(
                "Score: {}".format(str(self.game.score)),True, BLACK
                )

        font_next = pg.font.SysFont('Courier', 22, True, True)                      # 下一塊方塊
        next_block = font_next.render("Next Block", True, BLACK)

        font_game_over = pg.font.SysFont('Courier', 50, True, True)
        game_over_text = font_game_over.render("game over",True,BLACK)

        font_re = pg.font.SysFont('Courier', 30, True, True)
        game_re = font_re.render("Press keypad enter to restart",True,WHITE)

        font_gg =pg.font.SysFont("courier",30,True,True)
        gg_gg = font_gg.render("Press ESC to leave",True,WHITE)

        self.screen.blit(next_block,[475,130])
        self.screen.blit(text_score, [5, 150])
        self.game.draw()
        if self.game.GameState == "game_over":
            self.screen.blit(game_over_text,[175,300])
            self.screen.blit(game_re,[45,350])
            self.screen.blit(gg_gg,[140,380])
        pg.display.flip()

    def update(self):
        clock.tick(FPS)
        self.game.update()

    def run(self):
        self.counter = (self.counter + 1 )% self.game.game_level
        self.update()
        self.draw()


app = App()

#main code
while not game_over :

    app.run()


    for event in pg.event.get():
        if  event.type == pg.QUIT:
            game_over = True
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_ESCAPE:
                game_over = True
        # 遊戲中控制
        if app.game.GameState == "running":
            if event.type == pg.KEYDOWN:
                if event.key == pg.K_DOWN:
                    fallin = True
                if event.key == pg.K_RIGHT:
                    goright = True
                if event.key == pg.K_LEFT:
                    goleft = True
                if event.key == pg.K_UP:
                    turn = True
                if event.key == pg.K_c:
                    app.game.change()
                if event.key == pg.K_SPACE:
                    app.game.tetromino.GoSpace()
            if event.type == pg.KEYUP:
                if event.key == pg.K_DOWN:
                    fallin = False
                if event.key == pg.K_RIGHT:
                    goright = False
                if event.key == pg.K_LEFT:
                    goleft = False
                if event.key == pg.K_UP:
                    turn = False
        else:
            if event.type == pg.KEYDOWN:
                if event.key == pg.K_KP_ENTER:
                    app.game.restart = True

pg.QUIT
